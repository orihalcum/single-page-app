'use strict';

exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _element = require('./../../helpers/dom/element');

var _object = require('./../../helpers/object');

var _mixed = require('./../../helpers/mixed');

var _base = require('./../_base');

var _base2 = _interopRequireDefault(_base);

var _plugins = require('./../../plugins');

var _mergeSort = require('./../../utils/sortingAlgorithms/mergeSort');

var _mergeSort2 = _interopRequireDefault(_mergeSort);

var _pluginHooks = require('./../../pluginHooks');

var _pluginHooks2 = _interopRequireDefault(_pluginHooks);

var _rowsMapper = require('./rowsMapper');

var _rowsMapper2 = _interopRequireDefault(_rowsMapper);

var _date = require('./sortFunction/date');

var _date2 = _interopRequireDefault(_date);

var _numeric = require('./sortFunction/numeric');

var _numeric2 = _interopRequireDefault(_numeric);

var _default = require('./sortFunction/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_pluginHooks2.default.getSingleton().register('beforeColumnSort');
_pluginHooks2.default.getSingleton().register('afterColumnSort');

var HEADER_CLASS_SORTING = 'columnSorting';
var HEADER_CLASS_ASC_SORT = 'ascending';
var HEADER_CLASS_DESC_SORT = 'descending';

var ASC_SORT_STATE = 'asc';
var DESC_SORT_STATE = 'desc';
var NONE_SORT_STATE = 'none';

/**
 * @plugin ColumnSorting
 *
 * @description
 * This plugin sorts the view by a column (but does not sort the data source!).
 * To enable the plugin, set the `columnSorting` property to either:
 * * a boolean value (`true`/`false`),
 * * an object defining the initial sorting order (see the example below).
 *
 * @example
 * ```js
 * ...
 * // as boolean
 * columnSorting: true
 * ...
 * // as a object with initial order (sort ascending column at index 2)
 * columnSorting: {
 *  column: 2,
 *  sortOrder: 'asc', // 'asc' = ascending, 'desc' = descending, 'none' = original order
 *  sortEmptyCells: true // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table
 * }
 * ...
 * ```
 * @dependencies ObserveChanges moment
 */

var ColumnSorting = function (_BasePlugin) {
  _inherits(ColumnSorting, _BasePlugin);

  function ColumnSorting(hotInstance) {
    _classCallCheck(this, ColumnSorting);

    // TODO: It could be refactored, it's cache which store information about value of `sortIndicator` property
    // inside meta of first cell from particular column.
    var _this2 = _possibleConstructorReturn(this, (ColumnSorting.__proto__ || Object.getPrototypeOf(ColumnSorting)).call(this, hotInstance));

    _this2.sortIndicators = [];
    /**
     * Visual index of last sorted column.
     */
    _this2.sortColumn = void 0;
    /**
     * Order of last sorting. For `asc` ascending order, for `desc` descending order, for `none` the original order.
     *
     * @type {String}
     */
    _this2.sortOrder = NONE_SORT_STATE;
    /**
     * Object containing visual row indexes mapped to data source indexes.
     *
     * @type {RowsMapper}
     */
    _this2.rowsMapper = new _rowsMapper2.default(_this2);
    /**
     * Sorting empty cells.
     *
     * @type {Boolean}
     */
    _this2.sortEmptyCells = false;
    /**
     * It blocks the plugin translation, this flag is checked inside `onModifyRow` listener.
     *
     * @private
     * @type {boolean}
     */
    _this2.blockPluginTranslation = true;
    return _this2;
  }

  /**
   * Check if the plugin is enabled in the handsontable settings.
   *
   * @returns {Boolean}
   */


  _createClass(ColumnSorting, [{
    key: 'isEnabled',
    value: function isEnabled() {
      return !!this.hot.getSettings().columnSorting;
    }

    /**
     * Enable plugin for this Handsontable instance.
     */

  }, {
    key: 'enablePlugin',
    value: function enablePlugin() {
      var _this3 = this;

      if (this.enabled) {
        return;
      }

      this.setPluginOptions();

      if ((0, _mixed.isUndefined)(this.hot.getSettings().observeChanges)) {
        this.enableObserveChangesPlugin();
      }

      this.addHook('afterTrimRow', function () {
        return _this3.sortByPresetColumnAndOrder();
      });
      this.addHook('afterUntrimRow', function () {
        return _this3.sortByPresetColumnAndOrder();
      });
      this.addHook('modifyRow', function (row, source) {
        return _this3.onModifyRow(row, source);
      });
      this.addHook('unmodifyRow', function (row, source) {
        return _this3.onUnmodifyRow(row, source);
      });
      this.addHook('afterUpdateSettings', function () {
        return _this3.onAfterUpdateSettings();
      });
      this.addHook('afterGetColHeader', function (column, TH) {
        return _this3.onAfterGetColHeader(column, TH);
      });
      this.addHook('afterOnCellMouseDown', function (event, target) {
        return _this3.onAfterOnCellMouseDown(event, target);
      });
      this.addHook('afterCreateRow', function (index, amount) {
        return _this3.onAfterCreateRow(index, amount);
      });
      this.addHook('afterRemoveRow', function (index, amount) {
        return _this3.onAfterRemoveRow(index, amount);
      });
      this.addHook('afterInit', function () {
        return _this3.sortBySettings();
      });
      this.addHook('afterLoadData', function () {
        _this3.rowsMapper.clearMap();

        if (_this3.hot.view) {
          _this3.sortBySettings();
        }
      });
      if (this.hot.view) {
        this.sortBySettings();
      }
      _get(ColumnSorting.prototype.__proto__ || Object.getPrototypeOf(ColumnSorting.prototype), 'enablePlugin', this).call(this);
    }

    /**
     * Disable plugin for this Handsontable instance.
     */

  }, {
    key: 'disablePlugin',
    value: function disablePlugin() {
      _get(ColumnSorting.prototype.__proto__ || Object.getPrototypeOf(ColumnSorting.prototype), 'disablePlugin', this).call(this);
    }

    /**
     * Sorting the table by chosen column and order.
     *
     * @param {Number} column Visual column index.
     * @param {undefined|String} order Sorting order (`asc` for ascending, `desc` for descending and `none` for initial state).
     */

  }, {
    key: 'sort',
    value: function sort(column, order) {
      this.setSortingColumn(column, order);

      if ((0, _mixed.isUndefined)(this.sortColumn)) {
        return;
      }

      var allowSorting = this.hot.runHooks('beforeColumnSort', this.sortColumn, this.sortOrder);

      if (allowSorting === false) {
        return;
      }

      this.sortByPresetColumnAndOrder();
      this.updateSortIndicator();

      this.hot.runHooks('afterColumnSort', this.sortColumn, this.sortOrder);

      this.hot.render();
      this.saveSortingState();
    }

    /**
     * Check if any column is in a sorted state.
     *
     * @returns {Boolean}
     */

  }, {
    key: 'isSorted',
    value: function isSorted() {
      return this.isEnabled() && this.sortOrder !== NONE_SORT_STATE;
    }

    /**
     * Save the sorting state.
     */

  }, {
    key: 'saveSortingState',
    value: function saveSortingState() {
      var sortingState = {};

      if ((0, _mixed.isDefined)(this.sortColumn)) {
        sortingState.sortColumn = this.sortColumn;
      }

      if ((0, _mixed.isDefined)(this.sortOrder)) {
        sortingState.sortOrder = this.sortOrder;
      }

      if ((0, _object.hasOwnProperty)(sortingState, 'sortColumn') || (0, _object.hasOwnProperty)(sortingState, 'sortOrder')) {
        this.hot.runHooks('persistentStateSave', 'columnSorting', sortingState);
      }
    }

    /**
     * Load the sorting state.
     *
     * @returns {*} Previously saved sorting state.
     */

  }, {
    key: 'loadSortingState',
    value: function loadSortingState() {
      var storedState = {};
      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedState);

      return storedState.value;
    }

    /**
     * Set sorted column and order info
     *
     * @private
     * @param {Number} column Sorted visual column index.
     * @param {undefined|String} order Sorting order (`asc` for ascending, `desc` for descending and `none` for initial state).
     */

  }, {
    key: 'setSortingColumn',
    value: function setSortingColumn(column, order) {
      if ((0, _mixed.isUndefined)(column)) {
        this.sortColumn = void 0;
        this.sortOrder = NONE_SORT_STATE;

        return;
      } else if (this.sortColumn === column && (0, _mixed.isUndefined)(order)) {
        switch (this.sortOrder) {
          case DESC_SORT_STATE:
            this.sortOrder = NONE_SORT_STATE;

            break;

          case ASC_SORT_STATE:
            this.sortOrder = DESC_SORT_STATE;

            break;

          default:
            this.sortOrder = ASC_SORT_STATE;

            break;
        }
      } else {
        this.sortOrder = (0, _mixed.isUndefined)(order) ? ASC_SORT_STATE : order;
      }

      this.sortColumn = column;
    }

    /**
     * Enable the ObserveChanges plugin.
     *
     * @private
     */

  }, {
    key: 'enableObserveChangesPlugin',
    value: function enableObserveChangesPlugin() {
      var _this = this;

      this.hot._registerTimeout(setTimeout(function () {
        _this.hot.updateSettings({
          observeChanges: true
        });
      }, 0));
    }

    /**
     * Perform the sorting using a stable sort function.
     *
     * @private
     */

  }, {
    key: 'sortByPresetColumnAndOrder',
    value: function sortByPresetColumnAndOrder() {
      if (this.sortOrder === NONE_SORT_STATE) {
        this.rowsMapper.clearMap();

        return;
      }

      var indexesWithData = [];
      var columnMeta = this.hot.getCellMeta(0, this.sortColumn);
      var sortFunction = this.getSortFunctionForColumn(columnMeta);
      var emptyRows = this.hot.countEmptyRows();
      var nrOfRows = void 0;

      if ((0, _mixed.isUndefined)(columnMeta.columnSorting.sortEmptyCells)) {
        columnMeta.columnSorting = { sortEmptyCells: this.sortEmptyCells };
      }

      if (this.hot.getSettings().maxRows === Number.POSITIVE_INFINITY) {
        nrOfRows = this.hot.countRows() - this.hot.getSettings().minSpareRows;
      } else {
        nrOfRows = this.hot.countRows() - emptyRows;
      }

      // Function `getDataAtCell` won't call the indices translation inside `onModifyRow` listener - we check the `blockPluginTranslation` flag
      // (we just want to get data not already modified by `columnSorting` plugin translation).
      this.blockPluginTranslation = true;

      for (var visualIndex = 0; visualIndex < nrOfRows; visualIndex += 1) {
        indexesWithData.push([visualIndex, this.hot.getDataAtCell(visualIndex, this.sortColumn)]);
      }

      (0, _mergeSort2.default)(indexesWithData, sortFunction(this.sortOrder === ASC_SORT_STATE, columnMeta));

      // Append spareRows
      for (var _visualIndex = indexesWithData.length; _visualIndex < this.hot.countRows(); _visualIndex += 1) {
        indexesWithData.push([_visualIndex, this.hot.getDataAtCell(_visualIndex, this.sortColumn)]);
      }

      // The blockade of the indices translation is released.
      this.blockPluginTranslation = false;

      // Save all indexes to arrayMapper, a completely new sequence is set by the plugin
      this.rowsMapper._arrayMap = indexesWithData.map(function (indexWithData) {
        return indexWithData[0];
      });
    }

    /**
     * Get sort function for the particular column basing on its column meta.
     *
     * @private
     * @param {Object} columnMeta
     * @returns {Function}
     */

  }, {
    key: 'getSortFunctionForColumn',
    value: function getSortFunctionForColumn(columnMeta) {
      if (columnMeta.sortFunction) {
        return columnMeta.sortFunction;
      } else if (columnMeta.type === 'date') {
        return _date2.default;
      } else if (columnMeta.type === 'numeric') {
        return _numeric2.default;
      }

      return _default2.default;
    }

    /**
     * Update indicator states.
     *
     * @private
     */

  }, {
    key: 'updateSortIndicator',
    value: function updateSortIndicator() {
      if (this.sortOrder === NONE_SORT_STATE) {
        return;
      }
      var columnMeta = this.hot.getCellMeta(0, this.sortColumn);

      this.sortIndicators[this.sortColumn] = columnMeta.sortIndicator;
    }

    /**
     * Set options by passed settings
     *
     * @private
     */

  }, {
    key: 'setPluginOptions',
    value: function setPluginOptions() {
      var columnSorting = this.hot.getSettings().columnSorting;

      if ((0, _object.isObject)(columnSorting)) {
        this.sortEmptyCells = columnSorting.sortEmptyCells || false;
      } else {
        this.sortEmptyCells = false;
      }
    }

    /**
     * `modifyRow` hook callback. Translates visual row index to the sorted row index.
     *
     * @private
     * @param {Number} row Visual Row index.
     * @returns {Number} Physical row index.
     */

  }, {
    key: 'onModifyRow',
    value: function onModifyRow(row, source) {
      if (this.blockPluginTranslation === false && source !== this.pluginName) {
        var rowInMapper = this.rowsMapper.getValueByIndex(row);
        row = rowInMapper === null ? row : rowInMapper;
      }

      return row;
    }

    /**
     * Translates sorted row index to visual row index.
     *
     * @private
     * @param {Number} row Physical row index.
     * @returns {Number} Visual row index.
     */

  }, {
    key: 'onUnmodifyRow',
    value: function onUnmodifyRow(row, source) {
      if (this.blockPluginTranslation === false && source !== this.pluginName) {
        row = this.rowsMapper.getIndexByValue(row);
      }

      return row;
    }

    /**
     * `onAfterGetColHeader` callback. Adds column sorting css classes to clickable headers.
     *
     * @private
     * @param {Number} column Visual column index.
     * @param {Element} TH TH HTML element.
     */

  }, {
    key: 'onAfterGetColHeader',
    value: function onAfterGetColHeader(column, TH) {
      if (column < 0 || !TH.parentNode) {
        return false;
      }

      var headerLink = TH.querySelector('.colHeader');
      var TRs = TH.parentNode.parentNode.childNodes;
      var headerLevel = Array.prototype.indexOf.call(TRs, TH.parentNode);
      headerLevel -= TRs.length;

      if (!headerLink) {
        return;
      }

      if (this.hot.getSettings().columnSorting && column >= 0 && headerLevel === -1) {
        (0, _element.addClass)(headerLink, HEADER_CLASS_SORTING);
      }
      (0, _element.removeClass)(headerLink, HEADER_CLASS_DESC_SORT);
      (0, _element.removeClass)(headerLink, HEADER_CLASS_ASC_SORT);

      if (this.sortIndicators[column]) {
        if (column === this.sortColumn) {
          if (this.sortOrder === ASC_SORT_STATE) {
            (0, _element.addClass)(headerLink, HEADER_CLASS_ASC_SORT);
          } else if (this.sortOrder === DESC_SORT_STATE) {
            (0, _element.addClass)(headerLink, HEADER_CLASS_DESC_SORT);
          }
        }
      }
    }

    /**
     * afterUpdateSettings callback.
     *
     * @private
     */

  }, {
    key: 'onAfterUpdateSettings',
    value: function onAfterUpdateSettings() {
      this.sortBySettings();
    }

    /**
     * Sort the table by provided configuration.
     *
     * @private
     */

  }, {
    key: 'sortBySettings',
    value: function sortBySettings() {
      var sortingSettings = this.hot.getSettings().columnSorting;
      var loadedSortingState = this.loadSortingState();
      var sortingColumn = void 0;
      var sortingOrder = void 0;

      if ((0, _mixed.isUndefined)(loadedSortingState)) {
        sortingColumn = sortingSettings.column;
        sortingOrder = sortingSettings.sortOrder;
      } else {
        sortingColumn = loadedSortingState.sortColumn;
        sortingOrder = loadedSortingState.sortOrder;
      }

      if (typeof sortingColumn === 'number') {
        this.sort(sortingColumn, sortingOrder);
      }
    }

    /**
     * `afterCreateRow` callback. Updates the sorting state after a row have been created.
     *
     * @private
     * @param {Number} index Visual index of the created row.
     * @param {Number} amount Amount of created rows.
     */

  }, {
    key: 'onAfterCreateRow',
    value: function onAfterCreateRow(index, amount) {
      this.rowsMapper.shiftItems(index, amount);
    }

    /**
     * `afterRemoveRow` hook callback.
     *
     * @private
     * @param {Number} removedRows Visual indexes of the removed row.
     * @param {Number} amount  Amount of removed rows.
     */

  }, {
    key: 'onAfterRemoveRow',
    value: function onAfterRemoveRow(removedRows, amount) {
      this.rowsMapper.unshiftItems(removedRows, amount);
    }

    /**
     * `onAfterOnCellMouseDown` hook callback.
     *
     * @private
     * @param {Event} event Event which are provided by hook.
     * @param {CellCoords} coords Visual coords of the selected cell.
     */

  }, {
    key: 'onAfterOnCellMouseDown',
    value: function onAfterOnCellMouseDown(event, coords) {
      if (coords.row > -1) {
        return;
      }

      if ((0, _element.hasClass)(event.realTarget, HEADER_CLASS_SORTING)) {
        // reset order state on every new column header click
        if (coords.col !== this.sortColumn) {
          this.sortOrder = ASC_SORT_STATE;
        }

        this.sort(coords.col);
      }
    }

    /**
     * Destroy plugin instance.
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.rowsMapper.destroy();

      _get(ColumnSorting.prototype.__proto__ || Object.getPrototypeOf(ColumnSorting.prototype), 'destroy', this).call(this);
    }
  }]);

  return ColumnSorting;
}(_base2.default);

(0, _plugins.registerPlugin)('columnSorting', ColumnSorting);

exports.default = ColumnSorting;